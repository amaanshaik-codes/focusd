//! Prompt Assembler: Fetches all user data and assembles the AI prompt for journaling/coaching.
use crate::backend::{personality_db, goals, events, sessions, distractions, alarms, cards};

/// Fetch all persistent and daily data, and assemble the AI prompt in the required format.
#[tauri::command]
pub fn assemble_full_ai_prompt(user_id: i64) -> Result<String, String> {
    // 1. Fetch persistent profile data
    let answers = personality_db::get_onboarding_answers()?;
    let ptype = personality_db::infer_personality_type(&answers, "");
    let (goals_accomplished, total_session_hours, avg_sleep_hours) = personality_db::get_all_time_stats()?;

    // 2. Fetch onboarding questions (hardcoded or from module)
    let onboarding_questions = vec![
        "I prefer to plan my day in advance.",
        "I set clear goals for myself.",
        "I enjoy tracking my progress on tasks.",
        "I adapt quickly to changes in my schedule.",
        "I feel satisfied when I accomplish my daily goals.",
        "I use reminders or alarms to stay on track.",
        "I reflect on my productivity at the end of the day.",
        "I find it easy to focus for long periods.",
        "I get distracted easily by notifications.",
        "I like to experiment with new productivity techniques."
    ];

    // 3. Fetch daily data from each domain (replace with real fetches as implemented)
    let pending_goals = goals::get_pending_goals(None)?;
    let pending_tasks = goals::get_pending_tasks(None)?;
    let reminders = goals::get_reminders(None)?;
    let alarms = alarms::get_alarms(None)?;
    let card_taps = cards::get_today_core_card_taps(None)?;
    let event_logs = events::get_today_event_logs(None)?;
    let session_logs = sessions::get_today_sessions(None)?;
    let distraction_logs = distractions::get_today_distractions(None)?;

    // 4. Compute day count and assemble the prompt string (formatting as in example_ai_prompt.md)
    let day_count = crate::backend::journals::compute_day_count(user_id)?;
    let mut prompt = String::new();
    prompt.push_str(&format!("# Example AI Prompt Generated by Focusd Backend\n\n---\n\n## Day {}\n\n", day_count));
    prompt.push_str("You are a professional life and productivity coach. You have created a software tool for one of your clients that generates detailed daily reports. Your job is to read each day's report and, as the expert, write a first-person journal entry for the client, including:\n- A summary of their day in their own voice\n- Motivational feedback and suggestions\n- Personalized advice based on their habits and data\n\n**Please keep the tone realistic and grounded—avoid being overly dramatic or exaggerated when writing the first-person journal entry.**\n\n---\n\n");

    // User Profile
    prompt.push_str(&format!("- **Personality type:** {:?}  \n", ptype));
    prompt.push_str("- **Onboarding questions and answers:**\n");
    for (i, q) in onboarding_questions.iter().enumerate() {
        prompt.push_str(&format!("    {}. {} — {}\n", i+1, q, answers.get(i).unwrap_or(&0)));
    }
    prompt.push_str(&format!("- All-time goals accomplished: {}\n- Total session hours: {:.1}\n- Average sleep hours: {:.1}\n\n", goals_accomplished, total_session_hours, avg_sleep_hours));

    // Pending Goals, Tasks, Reminders
    prompt.push_str("\n## Pending Goals, Tasks, and Reminders\nBelow are the user's current pending items. Use these to inform your journal entry and coaching advice:\n\n");
    prompt.push_str("### Pending Goals\n");
    for g in &pending_goals {
    prompt.push_str(&format!("- [ ] {}\n\t- Deadline: {}\n\t- Created: {}\n\t- Linked to: {}\n", g.title, g.deadline, g.created, g.linked.join(", ")));
    }
    prompt.push_str("\n### Tasks\n");
    for t in &pending_tasks {
    prompt.push_str(&format!("- [ ] {}\n\t- Deadline: {}\n\t- Created: {}\n\t- Linked to: {}\n", t.title, t.deadline, t.created, t.linked.join(", ")));
    }
    prompt.push_str("\n### Reminders\n");
    for r in &reminders {
    prompt.push_str(&format!("- [ ] {}\n", r.text));
    }
    prompt.push_str("\n### Alarms\nBelow are the user's current alarms (if any). Use these to inform your journal entry and coaching advice:\n");
    for a in &alarms {
    prompt.push_str(&format!("- [{}] {}\n", a.time, a.label));
    }

    // Today's Data
    prompt.push_str("\n\n## Today's Data (from SQLite database)\nBelow is the raw data for today. Use this to reconstruct the user's day:\n\n**Note:**\n- The 'Wake' and 'Sleep' core card taps represent the start and end of the user's day, not the duration of sleep. Do not calculate sleep hours by subtracting these times.\n- For sleep-related insights, use the 'Average sleep hours' stat or any explicit sleep session data if available.\n\n");
    prompt.push_str("### Core Card Taps\n");
    for c in &card_taps {
    prompt.push_str(&format!("- [{}] {}\n", c.time, c.label));
    }
    prompt.push_str("\n### Event Card Logs\nBelow are user-logged items, which may include events, custom instructions, notes, or any other significant entries. Use both the name and description for richer context in journaling, feedback, and advice.\n");
    for e in &event_logs {
    prompt.push_str(&format!("- [{}] Event: \"{}\" (description: \"{}\")\n", e.time, e.name, e.description));
    }
    prompt.push_str("\n### Sessions (Pomodoros)\n");
    for s in &session_logs {
    prompt.push_str(&format!("- [{}-{}] Session: \"{}\" (description: \"{}\")\n", s.start, s.end, s.label, s.description));
    }
    prompt.push_str("\n### Distractions\n");
    for d in &distraction_logs {
    prompt.push_str(&format!("- [{}-{}] Distraction: \"{}\" (reason: \"{}\")\n", d.start, d.end, d.label, d.reason));
    }

    // Instructions
    prompt.push_str("\n---\n\nInstructions:\n1. Read the user profile, pending items (including deadlines, creation dates, and linked items), and today's data.\n2. If this is the user's first day (no previous data), focus on welcoming them, reflecting on their onboarding answers, and helping them set intentions for their productivity journey. If there is no daily data, acknowledge this and encourage the user to start tracking their activities.\n3. Every prompt should begin with a heading indicating the user's current day count in the app, e.g., 'Day 1', 'Day 2', 'Day 325', etc. (This counter should increment with each new day the user uses the app.)\n4. Write your response in the following format, making sure to:\n\t- Reference specific times, deadlines, and linked items from the data (if available).\n\t- Reflect on progress toward each pending goal and task, mentioning if any were advanced, completed, or delayed today.\n\t- Use concrete details from the day's events, sessions, distractions, and any user-logged items (including custom instructions or notes), always incorporating both the name and description for context.\n\t- Give actionable, personalized advice that directly addresses upcoming deadlines and linked goals/tasks.\n\n---\n## Day X\n(Replace X with the user's current day count, e.g., 'Day 1', 'Day 2', etc.)\n\n## Journal Entry\n<Write a first-person summary of the user's day, explicitly mentioning progress (or lack thereof) on pending goals and tasks, referencing deadlines, and reflecting on how today's actions relate to longer-term objectives. Include specific times and events from the data. If this is the first day or there is no daily data, reflect on onboarding answers, initial intentions, and welcome the user to their productivity journey.>\n\n## Feedback\n<Provide motivational feedback and observations about the user's progress, habits, and challenges. Reference how the user handled distractions, breaks, and any progress or setbacks on goals/tasks. If this is the first day, focus on encouragement and setting a positive tone.>\n\n## Advice for Tomorrow\n<Offer specific, actionable suggestions and advice for the next day. Explicitly mention which pending goals, tasks, or reminders should be prioritized, why (e.g., due soon, linked to another item), and suggest concrete steps or time blocks. If this is the first day, suggest how to get started with tracking and building habits.>\n---\n\n3. Be empathetic, supportive, and specific.\n4. **Keep the journal entry balanced and avoid overdramatization.**\n\n---\n\nThis prompt is dynamically generated from the user's onboarding answers, inferred personality type, all-time stats, and the day's raw database data. The backend updates these values daily and uses them to provide context-aware, personalized journaling and coaching.\n");

    Ok(prompt)
}
